[{"fileName":"introduction.md","id":"introduction","route":"/","sections":[{"raw":"# Zero-runtime Stylesheets-in-TypeScript.","level":1,"name":"Zero-runtime Stylesheets-in-TypeScript.","breadcrumbs":["Zero-runtime Stylesheets-in-TypeScript."],"content":"  Write your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.  Basically, it’s “CSS Modules-in-TypeScript” but with scoped CSS Variables + heaps more.  ---  🚧 &nbsp; Please note, this is an alpha release.  ---  🔥 &nbsp; All styles generated at build time — just like Sass, Less, etc.  ✨ &nbsp; Minimal abstraction over standard CSS.  🌳 &nbsp; Locally scoped class names — just like CSS Modules.  🚀 &nbsp; Locally scoped CSS Variables, @keyframes and @font-face rules.  🎨 &nbsp; High-level theme system with support for simultaneous themes. No globals!  🛠 &nbsp; Utils for generating variable-based calc expressions.  💪 &nbsp; Type-safe styles via CSSType.  🏃‍♂️ &nbsp; Optional runtime version for development and testing.  ---  Write your styles in .css.ts files.","page":"Introduction","hash":"zero-runtime-stylesheets-in-typescript"},{"raw":"## Requirements","level":2,"name":"Requirements","breadcrumbs":["Zero-runtime Stylesheets-in-TypeScript.","Requirements"],"content":"  Your project must be using webpack with the supplied webpack plugin, but that's it.","page":"Introduction","hash":"requirements"}]},{"fileName":"background.md","id":"background","route":"/background","sections":[{"raw":"## TODO - Tradeoffs","level":2,"name":"TODO - Tradeoffs","breadcrumbs":["TODO - Tradeoffs"],"content":"","page":"Background","hash":"todo---tradeoffs"},{"raw":"## TODO - Backstory","level":2,"name":"TODO - Backstory","breadcrumbs":["TODO - Backstory"],"content":"","page":"Background","hash":"todo---backstory"},{"raw":"## Thanks","level":2,"name":"Thanks","breadcrumbs":["Thanks"],"content":"  Nathan Nam Tran for creating css-in-js-loader, which served as the initial starting point for treat, the precursor to this library. - Stitches for getting us excited about CSS-Variables-in-JS. - SEEK for giving us the space to do interesting work.","page":"Background","hash":"thanks"}]},{"fileName":"setup.md","id":"setup","route":"/setup","sections":[{"raw":"## Webpack Setup","level":2,"name":"Webpack Setup","breadcrumbs":["Webpack Setup"],"content":"  Add the webpack plugin.","page":"Setup","hash":"webpack-setup"},{"raw":"## Babel Setup","level":2,"name":"Babel Setup","breadcrumbs":["Babel Setup"],"content":"  In order to improve the debugging experience, @mattsjones/css-core also provides an optional Babel plugin.  Add the Babel plugin.","page":"Setup","hash":"babel-setup"}]},{"fileName":"api.md","id":"api","route":"/api","sections":[{"raw":"# API","level":1,"name":"API","breadcrumbs":["API"],"content":"","page":"API","hash":"api"},{"raw":"## style","level":2,"name":"style","breadcrumbs":["API","style"],"content":"  Creates styles attached to a locally scoped class name.","page":"API","hash":"style"},{"raw":"## globalStyle","level":2,"name":"globalStyle","breadcrumbs":["API","globalStyle"],"content":"  Creates styles attached to a global selector.    > 💡 All theme variants must provide a value for every variable or it’s a type error.","page":"API","hash":"globalstyle"},{"raw":"## createTheme","level":2,"name":"createTheme","breadcrumbs":["API","createTheme"],"content":"createGlobalTheme  Creates a theme attached to a global selector, but with locally scoped variable names.    > 💡 All theme variants must provide a value for every variable or it’s a type error.  ## createTheme","page":"API","hash":"createtheme"},{"raw":"## createGlobalTheme","level":2,"name":"createGlobalTheme","breadcrumbs":["API","createGlobalTheme"],"content":"  Creates a theme attached to a global selector, but with locally scoped variable names.    > 💡 All theme variants must provide a value for every variable or it’s a type error.","page":"API","hash":"createglobaltheme"},{"raw":"## createThemeVars","level":2,"name":"createThemeVars","breadcrumbs":["API","createThemeVars"],"content":"  Creates a collection of CSS Variables without coupling them to a specific theme variant.  > 💡 This is useful if you want to split your themes into different bundles. In this case, your themes would be defined in separate files, but we'll keep this example simple.","page":"API","hash":"createthemevars"},{"raw":"## fontFace","level":2,"name":"fontFace","breadcrumbs":["API","fontFace"],"content":"  Creates a custom font attached to a locally scoped font name.","page":"API","hash":"fontface"},{"raw":"## globalFontFace","level":2,"name":"globalFontFace","breadcrumbs":["API","globalFontFace"],"content":"  Creates a globally scoped custom font.","page":"API","hash":"globalfontface"},{"raw":"## keyframes","level":2,"name":"keyframes","breadcrumbs":["API","keyframes"],"content":"  Creates a locally scoped set of keyframes.","page":"API","hash":"keyframes"},{"raw":"## globalKeyframes","level":2,"name":"globalKeyframes","breadcrumbs":["API","globalKeyframes"],"content":"  Creates a globally scoped set of keyframes.","page":"API","hash":"globalkeyframes"}]},{"fileName":"advanced-api.md","id":"advanced-api","route":"/advanced-api","sections":[{"raw":"## mapToStyles","level":2,"name":"mapToStyles","breadcrumbs":["mapToStyles"],"content":"  Creates an object that maps style names to hashed class names.  > 💡 This is useful for mapping to component props, e.g. ``","page":"Advanced API","hash":"maptostyles"},{"raw":"## createVar","level":2,"name":"createVar","breadcrumbs":["createVar"],"content":"  Creates a single CSS Variable.","page":"Advanced API","hash":"createvar"},{"raw":"## fallbackVar","level":2,"name":"fallbackVar","breadcrumbs":["fallbackVar"],"content":"  Provides fallback values when consuming variables.","page":"Advanced API","hash":"fallbackvar"},{"raw":"## assignVars","level":2,"name":"assignVars","breadcrumbs":["assignVars"],"content":"  Allows you to set an entire collection of CSS Variables anywhere within a style block.  > 💡 This is useful for creating responsive themes since it can be used within an @media block.    > 💡 All variables passed into this function must be assigned or it’s a type error.","page":"Advanced API","hash":"assignvars"},{"raw":"## inlineTheme","level":2,"name":"inlineTheme","breadcrumbs":["inlineTheme"],"content":"  Generates a custom theme at runtime as an inline style object.","page":"Advanced API","hash":"inlinetheme"}]},{"fileName":"utility-functions.md","id":"utility-functions","route":"/utility-functions","sections":[{"raw":"## calc","level":2,"name":"calc","breadcrumbs":["calc"],"content":"  Streamlines the creation of CSS calc expressions.","page":"Utility functions","hash":"calc"}]}]